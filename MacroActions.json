{
  "Actions": [
    {
      "Id": 0,
      "Name": "Download Kovalski BPA Rules",
      "Enabled": "true",
      "Execute": "System.Net.WebClient w = new System.Net.WebClient(); \n\nstring path = System.Environment.GetFolderPath(System.Environment.SpecialFolder.LocalApplicationData);\nstring downloadLoc = path+@\"\\TabularEditor\\BPARules.json\";\nstring url = \"https://raw.githubusercontent.com/microsoft/Analysis-Services/master/BestPracticeRules/BPARules.json\";\nstring dlMessage = \"Downloaded BPARules.json. Please restart Tabular Editor.\";\n\nif (System.IO.File.Exists(downloadLoc))\n{\n    if (System.Windows.Forms.MessageBox.Show(\"Would you like to overwrite the existing BPARules.json file?\",\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.YesNo,System.Windows.Forms.MessageBoxIcon.Warning) == System.Windows.Forms.DialogResult.Yes)\n    {\n        System.Windows.Forms.MessageBox.Show(dlMessage,\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\n    }\n    else\n    {\n        System.Windows.Forms.MessageBox.Show(\"Did not download BPARules.json.\",\"Overwrite Existing BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\n    }\n}\nelse\n{\n    System.Windows.Forms.MessageBox.Show(dlMessage,\"Download BPA Rules\",System.Windows.Forms.MessageBoxButtons.OK,System.Windows.Forms.MessageBoxIcon.Information);\n    w.DownloadFile(url, downloadLoc);\n}",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 2,
      "Name": "Theme Color Measures",
      "Enabled": "true",
      "Execute": "// '2021-05-09 / B.Agullo / added transparent color\r\n// by Bernat Agulló\r\n// www.esbrina-ba.com\r\n\r\n//adapted from Darren Gosbell's script at \r\n// https://darren.gosbell.com/2020/08/the-best-way-to-generate-data-driven-measures-in-power-bi-using-tabular-editor/\r\n\r\n//This script creates the color measures for each of the colors included in the theme color table. \r\n// See http://www.esbrina-ba.com/theme-compliant-conditional-formatting-measures/\r\n\r\n//adjust to fit your particular model\r\n\r\nstring colorTableName = \"Color\"; \r\nstring colorColumnName = \"Color Name\"; \r\nstring hexCodeColumnName = \"Color Code\"; \r\n\r\nbool createTransparentColor = true; \r\n\r\n// do not change code below this line\r\n\r\n\r\nstring colorColumnNameWithTable = \"'\" + colorTableName + \"'[\" + colorColumnName + \"]\";\r\nstring hexCodeColumnNameWithTable = \"'\" + colorTableName + \"'[\" + hexCodeColumnName + \"]\";\r\n\r\nstring query = \"EVALUATE VALUES(\" + colorColumnNameWithTable + \")\";\r\n \r\nusing (var reader = Model.Database.ExecuteReader(query))\r\n{\r\n    // Create a loop for every row in the resultset\r\n    while(reader.Read())\r\n    {\r\n        string myColor = reader.GetValue(0).ToString();\r\n        string measureName = myColor;\r\n        string myExpression = \"VAR HexCode = CALCULATE( SELECTEDVALUE( \" + hexCodeColumnNameWithTable + \"), \" + colorColumnNameWithTable + \" = \\\"\"  + myColor + \"\\\") VAR Result = FORMAT(hexCode,\\\"@\\\") RETURN Result \";\r\n        var newColorMeasure = Model.Tables[colorTableName].AddMeasure(measureName, myExpression);\r\n       newColorMeasure.FormatDax(); \r\n        \r\n    }\r\n}\r\n \nif(createTransparentColor){\r\n    var transparentMeasure = Model.Tables[colorTableName].AddMeasure(\"Transparent\",\"\\\"#FFFFFF00\\\"\"); \n};\n\r\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 3,
      "Name": "Enable Single Value Slider",
      "Enabled": "true",
      "Execute": "Selected.Column.SetExtendedProperty(\"ParameterMetadata\", \"{\\\"version\\\":0}\", ExtendedPropertyType.Json);",
      "Tooltip": "It will configure as \"What-if\" parameter through extended properties",
      "ValidContexts": "Column"
    },
    {
      "Id": 4,
      "Name": "Auto Generate Sum Measures",
      "Enabled": "true",
      "Execute": "/*\r\n * Title: Auto-generate SUM measures from columns\r\n * \r\n * Author: Daniel Otykier, twitter.com/DOtykier\r\n * \r\n * This script, when executed, will loop through the currently selected columns,\r\n * creating one SUM measure for each column and also hiding the column itself.\r\n */\r\n \r\n// Loop through all currently selected columns:\r\nforeach(var c in Selected.Columns)\r\n{\r\n    var newMeasure = c.Table.AddMeasure(\r\n        \"Sum of \" + c.Name,                    // Name\r\n        \"SUM(\" + c.DaxObjectFullName + \")\",    // DAX expression\r\n        c.DisplayFolder                        // Display Folder\r\n    );\r\n    \r\n    // Set the format string on the new measure:\r\n    newMeasure.FormatString = \"0.00\";\r\n\r\n    // Provide some documentation:\r\n    newMeasure.Description = \"This measure is the sum of column \" + c.DaxObjectFullName;\r\n\r\n    // Hide the base column:\r\n    c.IsHidden = true;\r\n}\r\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Id": 5,
      "Name": "Auto Generate Selected Value Measures",
      "Enabled": "true",
      "Execute": "/*\r\n * Title: Auto-generate SELECTEDVALUE measures from columns\r\n * \r\n * Author: '2021-07-30 / B.Agullo / twitter.com/AgulloBernat \n * based on code from Daniel Otykier, twitter.com/DOtykier\r\n * \r\n * This script, when executed, will loop through the currently selected columns,\r\n * creating one SELECTED measure for each column \r\n */\r\n \r\n// Loop through all currently selected columns:\r\nforeach(var c in Selected.Columns)\r\n{\r\n    var newMeasure = c.Table.AddMeasure(\r\n        \"Selected \" + c.Name,                    // Name\r\n        \"SELECTEDVALUE(\" + c.DaxObjectFullName + \")\",    // DAX expression\r\n        c.DisplayFolder                        // Display Folder\r\n    );\r\n    \r\n    // Set the format string on the new measure:\r\n    newMeasure.FormatString = c.FormatString;\r\n\r\n    // Provide some documentation:\r\n    newMeasure.Description = \"This measure is the selected value of \" + c.DaxObjectFullName;\r\n\r\n    // Hide the base column:\r\n    //c.IsHidden = true;\r\n}\r\n",
      "Tooltip": "",
      "ValidContexts": "Column"
    },
    {
      "Id": 6,
      "Name": "Hide columns on the many side of a relationship",
      "Enabled": "true",
      "Execute": "/*\r\n * Title: Hide columns on the many side of a relationship  \r\n *\r\n * Author: Matt Allington, https://exceleratorbi.com.au  \r\n *\r\n * it is dangerous to use columns on the many side of a relationship as it can \r\n * produce unexpected results, so it is a best practice to hide these columns\r\n * to discourage their use in reports.\r\n */\r\n\r\n// Hide all columns on many side of a join\r\nforeach (var r in Model.Relationships)\r\n{ // hide all columns on the many side of a join\r\n    var c = r.FromColumn.Name;\r\n    var t = r.FromTable.Name;\r\n    Model.Tables[t].Columns[c].IsHidden = true;\r\n}\r\n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 7,
      "Name": "Column Width Calc Group",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\n\n// '2021-10-03 / B.Agullo / \n// Calc group definition by B.Agullo as presented in https://www.esbrina-ba.com/the-ultimate-hack-to-set-column-widths-in-a-matrix/\n// Code to generate the calc group mostly generated by @Avatori's script published in https://powerofbi.org/2021/09/14/backup-restore-all-calculation-groups-workaround-required-for-some-visuals/\n// \"Auto\" calc item needs manual tuning that can be done once the calc group is created, instructions included in the calc item. \n\n// all parameters are required at run time so it can be stored as macro at model level\n\n\n\nstring calcGroupName = Interaction.InputBox(\"Provide a name for your Calc Group\", \"Calc Group Name\", \"Column Width\", 740, 400);\nstring minWidth = Interaction.InputBox(\"Entere minimum column width\", \"Min Column Width\", \"5\", 740, 400);\n\nint minWidthInt; \n\nbool isMinWidthANumber = Int32.TryParse(minWidth, out minWidthInt); \n\nif (!isMinWidthANumber) {\n    Error(minWidth + \" is not a positive integer. Invalid width\"); \n    return; \n} else if(minWidthInt < 0) { \n    Error(minWidth + \" is smaller than 0. Invalid Min width.\"); \n    return; \n}; \n\nstring maxWidth = Interaction.InputBox(\"Entere minimum column width\", \"Min Column Width\", \"7\", 740, 400);\n\nint maxWidthInt; \n\nbool isMaxWidthANumber = Int32.TryParse(maxWidth, out maxWidthInt); \n\nif (!isMaxWidthANumber) {\n    Error(maxWidth + \" is not a positive integer. Invalid width\"); \n    return; \n} else if(maxWidthInt < minWidthInt) { \n    Error(maxWidth + \" is smaller than \" + minWidthInt +\". Invalid Max width.\"); \n    return; \n}; \n\n\n//create calculation group Column Width\nvar calculationGroupTable1 = Model.AddCalculationGroup ();\n(Model.Tables[\"New Calculation Group\"] as CalculationGroupTable).CalculationGroup.Precedence = 1;\ncalculationGroupTable1.Name = calcGroupName;\ncalculationGroupTable1.Columns[\"Name\"].Name = calcGroupName; \n\nfor( int i = minWidthInt; i<=maxWidthInt; i++) {\n\n    //create calculation item 5\n    var calculationItem1 = calculationGroupTable1.AddCalculationItem(Convert.ToString(i,10));\n    calculationItem1.Expression = @\"SELECTEDMEASURE()\";\n    calculationItem1.FormatStringExpression = @\"VAR currentValue =\n        SELECTEDMEASURE()\n    VAR currentLength =\n        LEN(  CONVERT( currentValue, STRING ) ) \n        \n    VAR selectedLength = CONVERT( SELECTEDVALUE( 'Column Width'[Column Width], currentLength ), INTEGER )\n\n    VAR extraSpaces = IF( selectedLength > currentLength, selectedLength - currentLength, 0 ) \n\n    VAR prefix =\n        REPT( UNICHAR(0160), extraSpaces )\n    RETURN\n        \"\"\"\"\"\"\"\" & prefix & \"\"\"\"\"\"\"\"\n            & SELECTEDMEASUREFORMATSTRING()\";\n    calculationItem1.FormatDax();\n\n}; \n\n\n\n//create calculation item auto;\nvar calculationItemAuto = calculationGroupTable1.AddCalculationItem(\"auto\");\ncalculationItemAuto.Expression = @\"SELECTEDMEASURE()\";\ncalculationItemAuto.FormatStringExpression = @\"//// instructions to enable auto-mode: \r\n// 1. delete line SELECTEDMEASUREFORMATSTRING() that is not commented \r\n// 2. uncomment the rest of the code \r\n// 3. replace the expression for maxValue for an expression that will return the max value of your matrix\r\n// You can duplicate the calc item to use in diferent matrices of your report\r\n\r\nSELECTEDMEASUREFORMATSTRING()\r\n\r\n//VAR currentValue =\r\n//    SELECTEDMEASURE()\r\n//VAR currentLength =\r\n//    LEN(  CONVERT( currentValue, STRING ) ) \r\n//\r\n//VAR maxValue = CALCULATE(MAXX(SUMMARIZE('Sales','Sales'[Order number],'Sales'[Customer]),SELECTEDMEASURE()),ALLSELECTED( sales ))\r\n//VAR maxLength = LEN( TRIM( CONVERT( maxValue, STRING ) )) //+ X if you want some padding\r\n//\r\n//VAR extraSpaces = IF( maxLength > currentLength, maxLength - currentLength, 0 ) \r\n//\r\n//VAR prefix =\r\n//    REPT( UNICHAR(0160), extraSpaces )\r\n//RETURN\r\n//    \"\"\"\"\"\"\"\" & prefix & \"\"\"\"\"\"\"\"\r\n//        & SELECTEDMEASUREFORMATSTRING()\";\ncalculationItemAuto.FormatDax();",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 8,
      "Name": "Time Intelligence Calc Group",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\n\n// '2021-05-01 / B.Agullo / \n// '2021-05-17 / B.Agullo / added affected measure table\n// '2021-06-19 / B.Agullo / data label measures\n// '2021-07-10 / B.Agullo / added flag expression to avoid breaking already special format strings\n// '2021-09-23 / B.Agullo / added code to prompt for parameters (code credit to Daniel Otykier) \n// '2021-09-27 / B.Agullo / added code for general name \n// by Bernat Agulló\n// www.esbrina-ba.com\n\n//shout out to Johnny Winter for the base script and SQLBI for daxpatterns.com\n\n//select the measures that you want to be affected by the calculation group\n//before running the script. \n//measure names can also be included in the following array (no need to select them) \nstring[] preSelectedMeasures = {}; //include measure names in double quotes, like: {\"Profit\",\"Total Cost\"};\n\n//AT LEAST ONE MEASURE HAS TO BE AFFECTED!, \n//either by selecting it or typing its name in the preSelectedMeasures Variable\n\n\n\n//\n// ----- do not modify script below this line -----\n//\n\n\nstring affectedMeasures = \"{\";\n\nint i = 0; \n\nfor (i=0;i<preSelectedMeasures.GetLength(0);i++){\n  \n    if(affectedMeasures == \"{\") {\n    affectedMeasures = affectedMeasures + \"\\\"\" + preSelectedMeasures[i] + \"\\\"\";\n    }else{\n        affectedMeasures = affectedMeasures + \",\\\"\" + preSelectedMeasures[i] + \"\\\"\" ;\n    }; \n    \n};\n\n\nif (Selected.Measures.Count != 0) {\n    \n    foreach(var m in Selected.Measures) {\n        if(affectedMeasures == \"{\") {\n        affectedMeasures = affectedMeasures + \"\\\"\" + m.Name + \"\\\"\";\n        }else{\n            affectedMeasures = affectedMeasures + \",\\\"\" + m.Name + \"\\\"\" ;\n        };\n    };  \n};\n\n//check that by either method at least one measure is affected\nif(affectedMeasures == \"{\") { \n    Error(\"No measures affected by calc group\"); \n    return; \n};\n\n\n\nstring calcGroupName = Interaction.InputBox(\"Provide a name for your Calc Group\", \"Calc Group Name\", \"Time Intelligence\", 740, 400);\nif(calcGroupName == \"\") return;\n//string calcGroupName = \"Time Intelligence\";\n\n//add the name for the column you want to appear in the calculation group\nstring columnName = Interaction.InputBox(\"Provide a name for your Calc Group Column\", \"Calc Group Column Name\", calcGroupName, 740, 400);\nif(columnName == \"\") return;\n//string columnName = \"Time Calculation\";\n\nstring affectedMeasuresTableName = Interaction.InputBox(\"Provide a name for affected measures table\", \"Affected Measures Table Name\", calcGroupName  + \" Affected Measures\", 740, 400);\nif(affectedMeasuresTableName == \"\") return;\n//string affectedMeasuresTableName = \"Time Intelligence Affected Measures\"; \n\n\nstring affectedMeasuresColumnName = Interaction.InputBox(\"Provide a name for affected measures table\", \"Affected Measures Table Column Name\", \"Measure\", 740, 400);\nif(affectedMeasuresColumnName == \"\") return;\n//string affectedMeasuresColumnName = \"Measure\"; \n\nstring labelAsValueMeasureName = \"Label as Value Measure\"; \nstring labelAsFormatStringMeasureName = \"Label as format string\"; \n\n\n // '2021-09-24 / B.Agullo / model object selection prompts! \nvar factTable = SelectTable(label: \"Select your fact table\");\nif(factTable == null) return;\nvar factTableDateColumn = SelectColumn(factTable.Columns, label: \"Select the main date column\");\nif(factTableDateColumn == null) return;\n\nvar dateTable = SelectTable(label: \"Select your date table\");\nif(dateTable == null) {\n    Error(\"You just aborted the script\"); \n    return;\n} else {\n    dateTable.SetAnnotation(\"@AgulloBernat\",\"Time Intel Date Table\");\n}; \n\nvar dateTableDateColumn = SelectColumn(dateTable.Columns, label: \"Select the date column\");\nif(dateTableDateColumn == null) {\n    Error(\"You just aborted the script\"); \n    return;\n} else { \n    dateTableDateColumn.SetAnnotation(\"@AgulloBernat\",\"Time Intel Date Table Date Column\"); \n}; \n\nvar dateTableYearColumn = SelectColumn(dateTable.Columns, label: \"Select the year column\");\nif(dateTableYearColumn == null) return;\n\n\n//these names are for internal use only, so no need to be super-fancy, better stick to datpatterns.com model\nstring ShowValueForDatesMeasureName = \"ShowValueForDates\";\nstring dateWithSalesColumnName = \"DateWith\" + factTable.Name;\n\n// '2021-09-24 / B.Agullo / I put the names back to variables so I don't have to tough the script\nstring factTableName = factTable.Name;\nstring factTableDateColumnName = factTableDateColumn.Name;\nstring dateTableName = dateTable.Name;\nstring dateTableDateColumnName = dateTableDateColumn.Name;\nstring dateTableYearColumnName = dateTableYearColumn.Name; \n\n// '2021-09-24 / B.Agullo / this is for internal use only so better leave it as is \nstring flagExpression = \"UNICHAR( 8204 )\"; \n\nstring calcItemProtection = \"<CODE>\"; //default value if user has selected no measures\nstring calcItemFormatProtection = \"<CODE>\"; //default value if user has selected no measures\n\n\n\n//if there where selected or preselected measures, prepare protection code for expresion and formatstring\nif(affectedMeasures != \"{\") { \n    \n    affectedMeasures = affectedMeasures + \"}\";\n    \n    string affectedMeasureTableExpression = \n        \"SELECTCOLUMNS(\" + affectedMeasures + \",\\\"\" + affectedMeasuresColumnName + \"\\\",[Value])\";\n\n    var affectedMeasureTable = \n        Model.AddCalculatedTable(affectedMeasuresTableName,affectedMeasureTableExpression);\n    \n    affectedMeasureTable.FormatDax(); \n    affectedMeasureTable.Description = \n        \"Measures affected by \" + calcGroupName + \" calculation group.\" ;\n    \n    affectedMeasureTable.SetAnnotation(\"@AgulloBernat\",\"Time Intel Affected Measures Table\"); \n   \n    // this causes error\n    // affectedMeasureTable.Columns[affectedMeasuresColumnName].SetAnnotation(\"@AgulloBernat\",\"Time Intel Affected Measures Table Column\");\n\n    affectedMeasureTable.IsHidden = true;     \n    \n\n\n    string affectedMeasuresValues = \"VALUES('\" + affectedMeasuresTableName + \"'[\" + affectedMeasuresColumnName + \"])\";\n    \n    calcItemProtection = \n        \"SWITCH(\" + \n        \"   TRUE(),\" + \n        \"   SELECTEDMEASURENAME() IN \" + affectedMeasuresValues + \",\" + \n        \"   <CODE> ,\" + \n        \"   ISSELECTEDMEASURE([\" + labelAsValueMeasureName + \"]),\" + \n        \"   <LABELCODE> ,\" + \n        \"   SELECTEDMEASURE() \" + \n        \")\";\n        \n        \n    calcItemFormatProtection = \n        \"SWITCH(\" + \n        \"   TRUE() ,\" + \n        \"   SELECTEDMEASURENAME() IN \" + affectedMeasuresValues + \",\" + \n        \"   <CODE> ,\" + \n        \"   ISSELECTEDMEASURE([\" + labelAsFormatStringMeasureName + \"]),\" + \n        \"   <LABELCODEFORMATSTRING> ,\" +\n        \"   SELECTEDMEASUREFORMATSTRING() \" + \n        \")\";\n};\n    \nstring dateColumnWithTable = \"'\" + dateTableName + \"'[\" + dateTableDateColumnName + \"]\"; \nstring yearColumnWithTable = \"'\" + dateTableName + \"'[\" + dateTableYearColumnName + \"]\"; \nstring factDateColumnWithTable = \"'\" + factTableName + \"'[\" + factTableDateColumnName + \"]\";\nstring dateWithSalesWithTable = \"'\" + dateTableName + \"'[\" + dateWithSalesColumnName + \"]\";\nstring calcGroupColumnWithTable = \"'\" + calcGroupName + \"'[\" + columnName + \"]\";\n\n//check to see if a table with this name already exists\n//if it doesnt exist, create a calculation group with this name\nif (!Model.Tables.Contains(calcGroupName)) {\n  var cg = Model.AddCalculationGroup(calcGroupName);\n  cg.Description = \"Calculation group for time intelligence. Availability of data is taken from \" + factTableName + \".\";\n  cg.SetAnnotation(\"@AgulloBernat\",\"Time Intel Calc Group\"); \n};\n\n//set variable for the calc group\nTable calcGroup = Model.Tables[calcGroupName];\n\n//if table already exists, make sure it is a Calculation Group type\nif (calcGroup.SourceType.ToString() != \"CalculationGroup\") {\n  Error(\"Table exists in Model but is not a Calculation Group. Rename the existing table or choose an alternative name for your Calculation Group.\");\n  return;\n};\n\n//adds the two measures that will be used for label as value, label as format string \nvar labelAsValueMeasure = calcGroup.AddMeasure(labelAsValueMeasureName,\"\");\nlabelAsValueMeasure.Description = \"Use this measure to show the year evaluated in tables\"; \n\nvar labelAsFormatStringMeasure = calcGroup.AddMeasure(labelAsFormatStringMeasureName,\"0\");\nlabelAsFormatStringMeasure.Description = \"Use this measure to show the year evaluated in charts\"; \n\n//by default the calc group has a column called Name. If this column is still called Name change this in line with specfied variable\nif (calcGroup.Columns.Contains(\"Name\")) {\n  calcGroup.Columns[\"Name\"].Name = columnName;\n\n};\n\ncalcGroup.Columns[columnName].Description = \"Select value(s) from this column to apply time intelligence calculations.\";\ncalcGroup.Columns[columnName].SetAnnotation(\"@AgulloBernat\",\"Time Intel Calc Group Column\"); \n\n\n//set variable for the date table \n//Table dateTable = Model.Tables[dateTableName];\n\n\nstring DateWithSalesCalculatedColumnExpression = \n    dateColumnWithTable + \" <= MAX ( \" + factDateColumnWithTable + \")\";\n\ndateTable.AddCalculatedColumn(dateWithSalesColumnName,DateWithSalesCalculatedColumnExpression);\n\n\nstring ShowValueForDatesMeasureExpression = \n    \"VAR LastDateWithData = \" + \n    \"    CALCULATE ( \" + \n    \"        MAX (  \" + factDateColumnWithTable + \" ), \" + \n    \"        REMOVEFILTERS () \" +\n    \"    )\" +\n    \"VAR FirstDateVisible = \" +\n    \"    MIN ( \" + dateColumnWithTable + \" ) \" + \n    \"VAR Result = \" +  \n    \"    FirstDateVisible <= LastDateWithData \" +\n    \"RETURN \" + \n    \"    Result \";\n\nvar ShowValueForDatesMeasure = dateTable.AddMeasure(ShowValueForDatesMeasureName,ShowValueForDatesMeasureExpression); \n\nShowValueForDatesMeasure.FormatDax();\n\n\nstring CY = \n    \"/*CY*/ \" + \n    \"SELECTEDMEASURE()\";\n\nstring CYlabel = \n    \"SELECTEDVALUE(\" + yearColumnWithTable + \")\";\n\n\nstring PY = \n    \"/*PY*/ \" +\n    \"IF (\" + \n    \"    [\" + ShowValueForDatesMeasureName + \"], \" + \n    \"    CALCULATE ( \" + \n    \"        \"+ CY + \", \" + \n    \"        CALCULATETABLE ( \" + \n    \"            DATEADD ( \" + dateColumnWithTable + \" , -1, YEAR ), \" + \n    \"            \" + dateWithSalesWithTable + \" = TRUE \" +  \n    \"        ) \" + \n    \"    ) \" + \n    \") \";\n    \n\nstring PYlabel = \n    \"/*PY*/ \" +\n    \"IF (\" + \n    \"    [\" + ShowValueForDatesMeasureName + \"], \" + \n    \"    CALCULATE ( \" + \n    \"        \"+ CYlabel + \", \" + \n    \"        CALCULATETABLE ( \" + \n    \"            DATEADD ( \" + dateColumnWithTable + \" , -1, YEAR ), \" + \n    \"            \" + dateWithSalesWithTable + \" = TRUE \" +  \n    \"        ) \" + \n    \"    ) \" + \n    \") \";   \n\n\nstring YOY = \n    \"/*YOY*/ \" + \n    \"VAR ValueCurrentPeriod = \" + CY + \" \" + \n    \"VAR ValuePreviousPeriod = \" + PY + \" \" +\n    \"VAR Result = \" + \n    \"IF ( \" + \n    \"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \" + \n    \"     ValueCurrentPeriod - ValuePreviousPeriod\" + \n    \" ) \" +  \n    \"RETURN \" + \n    \"   Result \";\n\nstring YOYlabel = \n    \"/*YOY*/ \" + \n    \"VAR ValueCurrentPeriod = \" + CYlabel + \" \" + \n    \"VAR ValuePreviousPeriod = \" + PYlabel + \" \" +\n    \"VAR Result = \" + \n    \"IF ( \" + \n    \"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \" + \n    \"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod\" + \n    \" ) \" +  \n    \"RETURN \" + \n    \"   Result \";\n\nstring YOYpct = \n    \"/*YOY%*/ \" +\n   \"VAR ValueCurrentPeriod = \" + CY + \" \" + \n    \"VAR ValuePreviousPeriod = \" + PY + \" \" + \n    \"VAR CurrentMinusPreviousPeriod = \" +\n    \"IF ( \" + \n    \"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \" + \n    \"     ValueCurrentPeriod - ValuePreviousPeriod\" + \n    \" ) \" +  \n    \"VAR Result = \" + \n    \"DIVIDE ( \"  + \n    \"    CurrentMinusPreviousPeriod,\" + \n    \"    ValuePreviousPeriod\" + \n    \") \" + \n    \"RETURN \" + \n    \"  Result\";\n\nstring YOYpctLabel = \n    \"/*YOY%*/ \" +\n   \"VAR ValueCurrentPeriod = \" + CYlabel + \" \" + \n    \"VAR ValuePreviousPeriod = \" + PYlabel + \" \" + \n    \"VAR Result = \" +\n    \"IF ( \" + \n    \"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \" + \n    \"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod & \\\" (%)\\\"\" + \n    \" ) \" +  \n    \"RETURN \" + \n    \"  Result\";\n    \nstring YTD = \n    \"/*YTD*/\" + \n    \"IF (\" +\n    \"    [\" + ShowValueForDatesMeasureName + \"],\" + \n    \"    CALCULATE (\" +\n    \"        \" + CY+ \",\" + \n    \"        DATESYTD (\" +  dateColumnWithTable + \" )\" + \n    \"   )\" + \n    \") \";\n    \n\nstring YTDlabel = CYlabel + \"& \\\" YTD\\\"\"; \n\n\nstring PYTD = \n    \"/*PYTD*/\" + \n    \"IF ( \" + \n    \"    [\" + ShowValueForDatesMeasureName + \"], \" + \n    \"   CALCULATE ( \" + \n    \"       \" + YTD + \",\" + \n    \"    CALCULATETABLE ( \" + \n    \"        DATEADD ( \" + dateColumnWithTable + \", -1, YEAR ), \" + \n    \"       \" + dateWithSalesWithTable + \" = TRUE \" +  \n    \"       )\" + \n    \"   )\" + \n    \") \";\n    \nstring PYTDlabel = PYlabel + \"& \\\" YTD\\\"\"; \n\n    \nstring YOYTD = \n    \"/*YOYTD*/\" + \n    \"VAR ValueCurrentPeriod = \" + YTD + \" \" + \n    \"VAR ValuePreviousPeriod = \" + PYTD + \" \" + \n    \"VAR Result = \" + \n    \"IF ( \" + \n    \"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \" + \n    \"     ValueCurrentPeriod - ValuePreviousPeriod\" + \n    \" ) \" +  \n    \"RETURN \" + \n    \"   Result \";\n\n\nstring YOYTDlabel = \n    \"/*YOYTD*/\" + \n    \"VAR ValueCurrentPeriod = \" + YTDlabel + \" \" + \n    \"VAR ValuePreviousPeriod = \" + PYTDlabel + \" \" + \n    \"VAR Result = \" + \n    \"IF ( \" + \n    \"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \" + \n    \"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod\" + \n    \" ) \" +  \n    \"RETURN \" + \n    \"   Result \";\n\n\n\nstring YOYTDpct = \n    \"/*YOYTD%*/\" + \n    \"VAR ValueCurrentPeriod = \" + YTD + \" \" + \n    \"VAR ValuePreviousPeriod = \" + PYTD + \" \" + \n    \"VAR CurrentMinusPreviousPeriod = \" +\n    \"IF ( \" + \n    \"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \" + \n    \"     ValueCurrentPeriod - ValuePreviousPeriod\" + \n    \" ) \" +  \n    \"VAR Result = \" + \n    \"DIVIDE ( \"  + \n    \"    CurrentMinusPreviousPeriod,\" + \n    \"    ValuePreviousPeriod\" + \n    \") \" + \n    \"RETURN \" + \n    \"  Result\";\n\n\nstring YOYTDpctLabel = \n    \"/*YOY%*/ \" +\n   \"VAR ValueCurrentPeriod = \" + YTDlabel + \" \" + \n    \"VAR ValuePreviousPeriod = \" + PYTDlabel + \" \" + \n    \"VAR Result = \" +\n    \"IF ( \" + \n    \"    NOT ISBLANK ( ValueCurrentPeriod ) && NOT ISBLANK ( ValuePreviousPeriod ), \" + \n    \"     ValueCurrentPeriod & \\\" vs \\\" & ValuePreviousPeriod & \\\" (%)\\\"\" + \n    \" ) \" +  \n    \"RETURN \" + \n    \"  Result\";\n    \n\nstring defFormatString = \"SELECTEDMEASUREFORMATSTRING()\";\n\n//if the flag expression is already present in the format string, do not change it, otherwise apply % format. \nstring pctFormatString = \n\"IF(\" + \n\"\\n\tFIND( \"+ flagExpression + \", SELECTEDMEASUREFORMATSTRING(), 1, - 1 ) <> -1,\" + \n\"\\n\tSELECTEDMEASUREFORMATSTRING(),\" + \n\"\\n\t\\\"#,##0.# %\\\"\" + \n\"\\n)\";\n\n\n//the order in the array also determines the ordinal position of the item    \nstring[ , ] calcItems = \n    {\n        {\"CY\",      CY,         defFormatString,    \"Current year\",             CYlabel},\n        {\"PY\",      PY,         defFormatString,    \"Previous year\",            PYlabel},\n        {\"YOY\",     YOY,        defFormatString,    \"Year-over-year\",           YOYlabel},\n        {\"YOY%\",    YOYpct,     pctFormatString,    \"Year-over-year%\",          YOYpctLabel},\n        {\"YTD\",     YTD,        defFormatString,    \"Year-to-date\",             YTDlabel},\n        {\"PYTD\",    PYTD,       defFormatString,    \"Previous year-to-date\",    PYTDlabel},\n        {\"YOYTD\",   YOYTD,      defFormatString,    \"Year-over-year-to-date\",   YOYTDlabel},\n        {\"YOYTD%\",  YOYTDpct,   pctFormatString,    \"Year-over-year-to-date%\",  YOYTDpctLabel},\n    };\n\n    \nint j = 0;\n\n\n//create calculation items for each calculation with formatstring and description\nforeach(var cg in Model.CalculationGroups) {\n    if (cg.Name == calcGroupName) {\n        for (j = 0; j < calcItems.GetLength(0); j++) {\n            \n            string itemName = calcItems[j,0];\n            \n            string itemExpression = calcItemProtection.Replace(\"<CODE>\",calcItems[j,1]);\n            itemExpression = itemExpression.Replace(\"<LABELCODE>\",calcItems[j,4]); \n            \n            string itemFormatExpression = calcItemFormatProtection.Replace(\"<CODE>\",calcItems[j,2]);\n            itemFormatExpression = itemFormatExpression.Replace(\"<LABELCODEFORMATSTRING>\",\"\\\"\\\"\\\"\\\" & \" + calcItems[j,4] + \" & \\\"\\\"\\\"\\\"\");\n            \n            //if(calcItems[j,2] != defFormatString) {\n            //    itemFormatExpression = calcItemFormatProtection.Replace(\"<CODE>\",calcItems[j,2]);\n            //};\n\n            string itemDescription = calcItems[j,3];\n            \n            if (!cg.CalculationItems.Contains(itemName)) {\n                var nCalcItem = cg.AddCalculationItem(itemName, itemExpression);\n                nCalcItem.FormatStringExpression = itemFormatExpression;\n                nCalcItem.FormatDax();\n                nCalcItem.Ordinal = j; \n                nCalcItem.Description = itemDescription;\n                \n            };\n\n\n\n\n        };\n\n        \n    };\n};\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 9,
      "Name": "New Calculate Measure",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\r\nusing Microsoft.VisualBasic;\r\n\r\n// this sctipt creates a CALCULATE expression based on an existing measure\r\n// 2021-10-11 B.Agullo @AgulloBernat\r\n\r\nif(Selected.Measures.Count != 1) {\r\n    Error(\"Select one and only one measure\"); \r\n    return; \r\n} \r\n\r\nvar selectedMeasure = Selected.Measure;\r\nvar parentTable = selectedMeasure.Table; \r\n\r\nstring newMeasureName = Interaction.InputBox(\"New Measure name\", \"Name\", selectedMeasure.Name + \" modified\", 740, 400);\r\nstring newMeasureExpression = \"CALCULATE([\" + selectedMeasure.Name + \"])\"; \r\n\r\nparentTable.AddMeasure(newMeasureName,newMeasureExpression); \r\n",
      "Tooltip": "Creates new measure based on selected measure",
      "ValidContexts": "Measure"
    },
    {
      "Id": 10,
      "Name": "Sum Selected Measures",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\r\nusing Microsoft.VisualBasic;\r\n\r\n\r\nif(Selected.Measures.Count <= 1) {\r\n    Error(\"Select two or more measures\"); \r\n    return; \r\n} \r\n\r\nstring newMeasureName = Interaction.InputBox(\"New Measure name\", \"Name\", \"Sum of \" + Selected.Measures.Count + \" measures\", 740, 400);\r\n\r\nstring newMeasureExpression = \"\"; \r\nstring measureTable = \"\"; \r\n\r\nforeach(var iMeasure in Selected.Measures) { \r\n    if(measureTable == \"\") measureTable = iMeasure.Table.Name; \r\n\r\n    if(newMeasureExpression == \"\") {\r\n        newMeasureExpression = \"[\" + iMeasure.Name + \"]\";\r\n    } else {\r\n        newMeasureExpression += \" + [\" + iMeasure.Name + \"]\";\r\n    }; \r\n};\r\nvar newMeasure = Model.Tables[measureTable].AddMeasure(newMeasureName,newMeasureExpression); \r\n\r\n",
      "Tooltip": "Sums two or more measures into a new measure",
      "ValidContexts": "Measure"
    },
    {
      "Id": 11,
      "Name": "Dynamic Measure",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\n\n// by Johnny Winter\r\n// www.greyskullanalytics.com\n// '2021-10-15 / B.Agullo / dynamic parameters by B.Ag'2021-10-15 / B.Agullo / \r\n\n// Instructions:\n//select the measures you want to add to your Dynamic Measure and then run this script (or store it as macro)\r\n\n//\n// ----- do not modify script below this line -----\n//\n\nif (Selected.Measures.Count == 0) {\n  Error(\"Select one or more measures\");\n  return;\n}\n\r\nstring calcGroupName = Interaction.InputBox(\"Provide a name for your Calc Group\", \"Calc Group Name\", \"Dynamic Measure\", 740, 400);\nif(calcGroupName == \"\") return;\n\nstring columnName = Interaction.InputBox(\"Calc Group column name\", \"Column Name\", calcGroupName, 740, 400);\nif(columnName == \"\") return;\n\n//check to see if a table with this name already exists\n//if it doesnt exist, create a calculation group with this name\nif (!Model.Tables.Contains(calcGroupName)) {\n  var cg = Model.AddCalculationGroup(calcGroupName);\n  cg.Description = \"Contains dynamic measures and a column called \" + columnName + \". The contents of the dynamic measures can be controlled by selecting values from \" + columnName + \".\";\n};\n//set variable for the calc group\nTable calcGroup = Model.Tables[calcGroupName];\n\n//if table already exists, make sure it is a Calculation Group type\nif (calcGroup.SourceType.ToString() != \"CalculationGroup\") {\n  Error(\"Table exists in Model but is not a Calculation Group. Rename the existing table or choose an alternative name for your Calculation Group.\");\n  return;\n};\r\n\r\n\n\r\nstring measureName = Interaction.InputBox(\"Dynamic Measure Name (cannot be named \\\"\" + columnName +\"\\\")\", \"Measure Name\", \"Placeholder for Dynamic Measure\", 740, 400);\nif(measureName == \"\") return;\r\n\nstring switchSuffix = Interaction.InputBox(\"suffix for the SWITCH dynamic measure\", \"Suffix for switch\", \"SWITCH\", 740, 400);\nif(switchSuffix == \"\") return;\n\nstring formattedSuffix = Interaction.InputBox(\"suffix for the FORMATTED dynamic measure\", \"Suffix for formatted\", \"FORMATTED\", 740, 400);\nif(formattedSuffix == \"\") return;\n\nstring measureDefault = Interaction.InputBox(\"Measure default value\", \"Default Value\", \"BLANK()\", 740, 400);\nif(measureDefault == \"\") return;\n\r\n//by default the calc group has a column called Name. If this column is still called Name change this in line with specfied variable\r\nif (calcGroup.Columns.Contains(\"Name\")) {\r\n  calcGroup.Columns[\"Name\"].Name = columnName;\r\n};\r\ncalcGroup.Columns[columnName].Description = \"Select value(s) from this column to control the contents of the dynamic measures.\";\r\n\r\n//check to see if dynamic measure has been created, if not create it now\r\n//if a measure with that name alredy exists elsewhere in the model, throw an error\r\nif (!calcGroup.Measures.Contains(measureName)) {\r\n  foreach(var m in Model.AllMeasures) {\r\n    if (m.Name == measureName) {\r\n      Error(\"This measure name already exists in table \" + m.Table.Name + \". Either rename the existing measure or choose a different name for the measure in your Calculation Group.\");\r\n      return;\r\n    };\r\n  };\r\n  var newMeasure = calcGroup.AddMeasure(\r\n  measureName, measureDefault);\r\n  newMeasure.Description = \"Control the content of this measure by selecting values from \" + columnName + \".\";\r\n};\r\n\r\n//create calculation items based on selected measures, including check to make sure calculation item doesnt exist\r\nforeach(var cg in Model.CalculationGroups) {\r\n  if (cg.Name == calcGroupName) {\r\n    foreach(var m in Selected.Measures) {\r\n      if (!cg.CalculationItems.Contains(m.Name)) {\r\n        var newCalcItem = cg.AddCalculationItem(\r\n        m.Name, \"IF ( \" + \"ISSELECTEDMEASURE ( [\" + measureName + \"] ), \" + \"[\" + m.Name + \"], \" + \"SELECTEDMEASURE() )\");\n        // '2021-10-15 / B.Agullo / double quotes in format string need to be doubled to be preserved\r\n        newCalcItem.FormatStringExpression = \"IF ( \" + \"ISSELECTEDMEASURE ( [\" + measureName + \"] ),\\\"\" + m.FormatString.Replace(\"\\\"\",\"\\\"\\\"\") + \"\\\", SELECTEDMEASUREFORMATSTRING() )\";\r\n        newCalcItem.FormatDax();\r\n      };\r\n    };\r\n  };\r\n};\r\n\r\n//check to see if SWITCH dynamic measure has been created, if not create it now\r\n//if a measure with that name alredy exists elsewhere in the model, throw an error\r\nstring switchMeasureName = measureName + \" \" + switchSuffix;\r\nif (!calcGroup.Measures.Contains(switchMeasureName)) {\r\n  foreach(var m in Model.AllMeasures) {\r\n      if (m.Name == switchMeasureName) {\r\n      Error(\"This measure name already exists in table \" + m.Table.Name + \". Either rename the existing measure or choose a different name for the measure in your Calculation Group.\");\r\n      return;\r\n    };\r\n  };\r\n  var newMeasure = calcGroup.AddMeasure(switchMeasureName);\r\n  newMeasure.Description = \"Control the content of this measure by selecting values from \" + columnName + \".\";\r\n};\r\n\r\n//check to see if FORMATTED dynamic measure has been created, if not create it now\r\n//if a measure with that name alredy exists elsewhere in the model, throw an error\r\nstring formattedMeasureName = measureName + \" \" + formattedSuffix;\r\nif (!calcGroup.Measures.Contains(formattedMeasureName)) {\r\n  foreach(var m in Model.AllMeasures) {\r\n      if (m.Name == formattedMeasureName) {\r\n      Error(\"This measure name already exists in table \" + m.Table.Name + \". Either rename the existing measure or choose a different name for the measure in your Calculation Group.\");\r\n      return;\r\n    };\r\n  };\r\nvar newMeasure = calcGroup.AddMeasure(formattedMeasureName);\r\n  newMeasure.Description = \"Control the content of this measure by selecting values from \" + columnName + \".\";\r\n};\r\n\r\n//create DAX for SWITCH and FORMATTED measures\r\nstring switchItemList = \"\";\r\nstring formattedItemList = \"\";\r\nforeach(var cg in Model.CalculationGroups) {\r\n  if (cg.Name == calcGroupName) {\r\n      foreach (var ci in cg.CalculationItems) {\r\n          switchItemList = switchItemList + \"\\\"\" + ci.Name + \"\\\", [\" + ci.Name + \"],\";\r\n          string formatString = \"\";          \r\n          foreach(var m in Model.AllMeasures) {\r\n              if (m.Name == ci.Name) {\r\n                  formatString = m.FormatString;\r\n              };\r\n          }; \r\n          formattedItemList = formattedItemList + \"\\\"\" + ci.Name + \"\\\", FORMAT( [\" + ci.Name + \"], \\\"\" + formatString.Replace(\"\\\"\",\"\\\"\\\"\") + \"\\\"),\";\r\n      };\r\n    };\r\n};\r\n\r\n//assign SWITCH measure DAX\r\nMeasure switchMeasure = calcGroup.Measures[switchMeasureName];\r\nswitchMeasure.Expression = \r\n    \"SWITCH ( SELECTEDVALUE('\" + calcGroupName + \"'[\" + columnName + \"]),\" +\r\n    switchItemList +\r\n    measureDefault + \")\";\r\n    switchMeasure.FormatDax();\r\n\r\n//assign FORMATTED measure DAX\r\nMeasure formattedMeasure = calcGroup.Measures[formattedMeasureName];\r\nformattedMeasure.Expression = \r\n    \"SWITCH ( SELECTEDVALUE('\" + calcGroupName + \"'[\" + columnName + \"]),\" +\r\n    formattedItemList +\r\n    measureDefault + \")\";\r\n    formattedMeasure.FormatDax();\r\n\r\n    \r\n//check to see if Display measure has been created, if not create it now\r\n//if a measure with that name alredy exists elsewhere in the model, throw an error\r\nstring displayMeasureName = \"Display selected \" + measureName + \"(s)\";\r\nif (!calcGroup.Measures.Contains(displayMeasureName)) {\r\n  foreach(var m in Model.AllMeasures) {\r\n      if (m.Name == displayMeasureName) {\r\n      Error(\"This measure name already exists in table \" + m.Table.Name + \". Either rename the existing measure or choose a different name for the measure in your Calculation Group.\");\r\n      return;\r\n    };\r\n  };\r\nvar newMeasure = calcGroup.AddMeasure(displayMeasureName);\r\n  newMeasure.Description = \"This measure displays a concatenated list of selections from \" + columnName + \".\";\r\n};\r\ncalcGroup.Measures[displayMeasureName].Expression = \r\n    \"CONCATENATEX('\" + calcGroupName + \"', '\" + calcGroupName + \"'[\" + columnName + \"], \\\", \\\")\";",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 13,
      "Name": "Time Int Labels",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\nusing Microsoft.VisualBasic;\n\n// '2021-10-16 / B.Agullo / converted to macro using code from Stephen Maguire and Daniel Otykier, and people in twitter helping with C#!  \n// '2021-07-10 / B.Agullo / \n// by Bernat Agulló\n// www.esbrina-ba.com\n\n//this script creates an extra calculation group to work together with Time Calculation group \n//you need to create the Time calculation group script with the dynamic label measures before running this script \n//the names of the measure and affected measure table must match \n//if you changed the default valures on the time intel calc group, change them heere too .\n\n\nvar ts = Model.Tables.Where(x => x.GetAnnotation(\"@AgulloBernat\") == \"Time Intel Calc Group\");\n\nvar timeIntelCalcGroup = null as CalculationGroupTable; \n\nif (ts.Count() == 1 ) {\n    timeIntelCalcGroup = ts.First() as CalculationGroupTable;\n} else if (ts.Count() < 1) {\n    Error(\"Time Itelligence Calc group script by @AgulloBernat has not been successfuly executed yet. Execute it first and then run again the present script\"); \n    return; \n} else { \n    //this should never happen -- who needs two calc groups for time intelligence? \n    timeIntelCalcGroup = SelectTable(ts, label:\"Select your existing time intelligence calc group calculation group table:\") as CalculationGroupTable;\n};\n\nif (timeIntelCalcGroup == null) { return; } // doesn't work in TE3 as cancel button doesn't return null in TE3\n\n\n//init Affected Measure Table\nts = Model.Tables.Where(x => x.GetAnnotation(\"@AgulloBernat\") == \"Time Intel Affected Measures Table\");\n\nvar affectedMeasuresTable = null as Table; \n\nif (ts.Count() == 1 ) {\n    affectedMeasuresTable = ts.First(); \n} else if (ts.Count() < 1) {\n    Error(\"Time Itelligence Calc group script by @AgulloBernat has not been successfuly executed yet. Execute it first and then run again the present script\"); \n    return; \n} else { \n    //this should never happen -- who needs two time intelligence affected measures calc tables? \n    affectedMeasuresTable = SelectTable(ts, label:\"Select your existing time intelligence affected measures table:\") as CalculationGroupTable;\n};\n\nif (affectedMeasuresTable == null) { return; } // doesn't work in TE3 as cancel button doesn't return null in TE3\n\nstring labelsCalculationGroupName = Interaction.InputBox(\"Provide a name for the dynamic labels Calc Group\", \"Calc Group Name\", \"Labels\", 740, 400);\nif(labelsCalculationGroupName == \"\") return;\n\nstring labelsCalculationGroupColumnName = Interaction.InputBox(\"Provide a name for the column of the Calc Group\", \"Calc Group Name\", labelsCalculationGroupName, 740, 400);\nif(labelsCalculationGroupColumnName == \"\") return;\n\nstring labelsCalculationItemName = \"Last Point Time Calculation\"; \n\nstring affectedMeasuresTableName = \"Time Intelligence Affected Measures\"; //affectedMeasuresTable.Name; \nstring affectedMeasuresColumnName = \"Measure\"; // affectedMeasuresTable.Columns[0].Name; \n\n//add the name of the existing time intel calc group here\nstring calcGroupName = \"Time Intelligence\";\n\n//add the name for date table of the model\nstring dateTableName = \"Date\";\nstring dateTableDateColumnName = \"Date\";\n\nstring labelAsValueMeasureName = \"Label as Value Measure\"; \n\nstring flagExpression = \"UNICHAR( 8204 )\"; \n\n\n//generates new calc group \nvar calculationGroupTable1 = (Model.AddCalculationGroup(labelsCalculationGroupName) as CalculationGroupTable);\r\n\ncalculationGroupTable1.Description = \"Calculation group to manipulate data labels\"; \n\n//sees the default precedence number assigned \nint labelGroupPrecedence = (Model.Tables[labelsCalculationGroupName] as CalculationGroupTable).CalculationGroup.Precedence;\nint timeIntelGroupPrecedence = (Model.Tables[calcGroupName] as CalculationGroupTable).CalculationGroup.Precedence;\n\n//if time intel has lower precedence... \nif(labelGroupPrecedence > timeIntelGroupPrecedence) {\n    //...swap precedence values \n    (Model.Tables[labelsCalculationGroupName] as CalculationGroupTable).CalculationGroup.Precedence = timeIntelGroupPrecedence;\n    (Model.Tables[calcGroupName] as CalculationGroupTable).CalculationGroup.Precedence = labelGroupPrecedence; \n}; \n\n\n(Model.Tables[\"Labels\"].Columns[\"Name\"] as DataColumn).Name = labelsCalculationGroupColumnName;\r\nvar calculationItem1 = calculationGroupTable1.AddCalculationItem(labelsCalculationItemName);\r\ncalculationItem1.Expression = \"SELECTEDMEASURE()\";\ncalculationItem1.FormatStringExpression =\n\"SWITCH(\" + \n\"\\n    TRUE(),\" + \n\"\\n    SELECTEDMEASURENAME()\" + \n\"\\n        IN VALUES( '\" + affectedMeasuresTableName + \"'[\" + affectedMeasuresColumnName + \"] ),\" + \n\"\\n        VAR maxDateInVisual =\" + \n\"\\n            CALCULATE( MAX( '\" + dateTableName + \"'[\" +dateTableDateColumnName + \"] ), ALLSELECTED( '\" + dateTableName + \"' ) )\" + \n\"\\n        VAR maxDateInDataPoint =\" + \n\"\\n            MAX( '\" + dateTableName + \"'[\" + dateTableDateColumnName + \"] )\" + \n\"\\n        VAR result =\" + \n\"\\n            IF( maxDateInDataPoint = maxDateInVisual, [\" + labelAsValueMeasureName +\"] )\" + \n\"\\n        RETURN\" + \n\"\\n           \" + flagExpression + \" & \\\"\\\"\\\"\\\" & result & \\\"\\\"\\\";\\\"\\\"\\\" & result & \\\"\\\"\\\";\\\"\\\"\\\" & result & \\\"\\\"\\\";\\\"\\\"\\\" & result & \\\"\\\"\\\"\\\",\" + \n\"\\n    SELECTEDMEASUREFORMATSTRING()\" + \n\"\\n)\";\r\n\ncalculationItem1.Description = \"Show dynamic label as data label of the last point in a line series over a time axis\"; \n",
      "Tooltip": "",
      "ValidContexts": "Model"
    },
    {
      "Id": 14,
      "Name": "Time Int Measures",
      "Enabled": "true",
      "Execute": "using System.Windows.Forms;\r\n\r\n// Variables\r\n\r\nvar promptForVariables = true;                          // Set to true to prompt the user for the defaultTimeIntelligenceName & defaultCurrentPeriodItemName\r\n\r\nvar defaultTimeIntelligenceName = \"Time Intelligence\";  // Used to determine the calculation group's suffix\r\n\r\nvar defaultCurrentPeriodItemName = \"CUR\";               // Calculation item to excluded from measure creation\r\n\r\nvar defaultMeasureExpression =                          // The template DAX query\r\n    \"\\r\\n\" +\r\n    \"CALCULATE(\\r\\n\" +\r\n    \"    <measure>,\\r\\n\" +\r\n    \"    <column> = \\\"<item>\\\"\\r\\n\" +\r\n    \")\";\r\n\r\n// Custom InputBox (instead of VB InputBox as this returns null instead of \"\" on cancel)\r\n\r\nFunc<string, string, string, string> InputBox = (string promptText, string titleText, string defaultText) =>\r\n{\r\n\r\n    var labelText = new Label()\r\n    {\r\n\r\n        Text = promptText,\r\n        Dock = DockStyle.Fill,\r\n\r\n    };\r\n\r\n    var textboxText = new TextBox()\r\n    {\r\n\r\n        Text = defaultText,\r\n        Dock = DockStyle.Bottom\r\n\r\n    };\r\n\r\n    var panelButtons = new Panel()\r\n    {\r\n\r\n        Height = 30,\r\n        Dock = DockStyle.Bottom\r\n\r\n    };\r\n    \r\n    var buttonOK = new Button()\r\n    {\r\n\r\n        Text = \"OK\",\r\n        DialogResult = DialogResult.OK,\r\n        Top = 8,\r\n        Left = 120\r\n\r\n    };\r\n\r\n    var buttonCancel = new Button()\r\n    {\r\n\r\n        Text = \"Cancel\",\r\n        DialogResult = DialogResult.Cancel,\r\n        Top = 8,\r\n        Left = 204\r\n\r\n    };\r\n\r\n    var formInputBox = new Form()\r\n    {\r\n\r\n        Text = titleText,\r\n        Height = 143,\r\n        Padding = new System.Windows.Forms.Padding(8),\r\n        FormBorderStyle = FormBorderStyle.FixedDialog,\r\n        MinimizeBox = false,\r\n        MaximizeBox = false,\r\n        StartPosition = FormStartPosition.CenterScreen,\r\n        AcceptButton = buttonOK,\r\n        CancelButton = buttonCancel\r\n\r\n    };\r\n\r\n    formInputBox.Controls.AddRange(new Control[] { labelText, textboxText, panelButtons });\r\n\r\n    panelButtons.Controls.AddRange(new Control[] { buttonOK, buttonCancel });\r\n\r\n    return formInputBox.ShowDialog() == DialogResult.OK ? textboxText.Text : null;\r\n\r\n};\r\n\r\n// Check measure(s) are selected\r\n\r\nif (!Selected.Measures.Any())\r\n{\r\n\r\n    Error(\"No measure(s) selected.\");\r\n\r\n    return;\r\n\r\n}\r\n\r\n// Get variables input\r\n\r\nif (promptForVariables)\r\n{\r\n\r\n    defaultTimeIntelligenceName = InputBox(\r\n        \"Provide the common name for time/period intelligence tables. This is used to determine the calculation group's suffix, e.g. '(ISO)' in 'Time Intelligence (ISO)'.\",\r\n        \"Default Time Intelligence Name\",\r\n        defaultTimeIntelligenceName\r\n        );\r\n\r\n    if (defaultTimeIntelligenceName == null) { return; }\r\n\r\n    defaultCurrentPeriodItemName = InputBox(\r\n        \"Provide the name of the 'current' time/period intelligence calculation item. Any calculation item with this name will be excluded from measure creation.\",\r\n        \"Default 'Current' Name\",\r\n        defaultCurrentPeriodItemName\r\n        );\r\n\r\n    if (defaultCurrentPeriodItemName == null) { return; }\r\n\r\n}\r\n\r\n// Get calculation group table\r\n\r\nvar ts = Model.Tables.Where(x => x.ObjectType == (ObjectType.CalculationGroupTable));\r\n\r\nvar t = null as CalculationGroupTable;\r\n\r\nif (ts.Any())\r\n{\r\n\r\n    t = SelectTable(ts, label:\"Select calculation group table:\") as CalculationGroupTable;\r\n\r\n    if (t == null) { return; } // [TODO] as at 7 Oct 2021 this doesn't work in TE3 as cancel button doesn't return null in TE3\r\n\r\n}\r\nelse\r\n{\r\n\r\n    Error(\"No calculation group tables in the model.\");\r\n\r\n}\r\n\r\n// Get calculation group's calculation items data column\r\n\r\nvar cs = t.DataColumns.Where(x => x.SourceColumn == \"Name\");\r\n\r\nvar c = null as DataColumn;\r\n\r\nif (cs.Count() != 1)\r\n{\r\n\r\n    Warning(\"Cannot identify calculation items column.\");\r\n\r\n    c = SelectColumn(t, label:\"Select calculation items column:\") as DataColumn;\r\n\r\n    if (c == null) { return; } // [TODO] as at 7 Oct 2021 this doesn't work in TE3 as cancel button doesn't return null in TE3\r\n\r\n}\r\nelse\r\n{\r\n\r\n    c = cs.First();\r\n\r\n}\r\n\r\n// If calculation group is a time intelligence calculation group get the suffix (if any)\r\n\r\nvar tableSuffix = null as string;\r\n\r\nif (t.Name.ToUpper().Substring(0, Math.Min(defaultTimeIntelligenceName.Length, t.Name.Length)) == defaultTimeIntelligenceName.ToUpper())\r\n{\r\n\r\n    tableSuffix = \" \" + t.Name.Substring(defaultTimeIntelligenceName.Length).Trim();\r\n\r\n}\r\nelse\r\n{\r\n\r\n    tableSuffix = \"\";\r\n\r\n}\r\n\r\n// Create measures\r\n\r\nforeach (var m in Selected.Measures)\r\n{\r\n\r\n    foreach (var i in t.CalculationItems.Where(i => !i.Name.ToUpper().Contains(defaultCurrentPeriodItemName.ToUpper())))\r\n    {\r\n\r\n        var measureName = m.Name + \" \" + i.Name + tableSuffix;\r\n\r\n        var measureExpression = defaultMeasureExpression\r\n            .Replace(\"<measure>\", m.DaxObjectName)\r\n            .Replace(\"<column>\", c.DaxObjectFullName)\r\n            .Replace(\"<item>\", i.Name);\r\n\r\n        var measureDisplayFolder = m.DisplayFolder + \"\\\\\" + m.Name + \"\\\\\" + t.Name;\r\n\r\n        var mms = Model.AllMeasures.Where(x => x.Name == measureName);\r\n\r\n        if (mms.Any()) { foreach (var mm in mms.ToList()) { mm.Delete(); } }\r\n\r\n        var nm = m.Table.AddMeasure(measureName, measureExpression, measureDisplayFolder);\r\n\r\n        var e = i.FormatStringExpression;\r\n\r\n        if (e != null && e.Substring(0, 1) == \"\\\"\" && e.Substring(e.Length - 1, 1) == \"\\\"\")\r\n        {\r\n\r\n            nm.FormatString = e.Substring(0, e.Length - 1).Substring(1, e.Length - 2);\r\n\r\n        }\r\n        else\r\n        {\r\n\r\n            nm.FormatString = m.FormatString;\r\n\r\n        }\r\n\r\n    }\r\n\r\n}\r\n\r\n// End\r\n\r\nInfo(\"Script finished.\");",
      "Tooltip": "",
      "ValidContexts": "Measure"
    },
    {
      "Id": 15,
      "Name": "Measure Group",
      "Enabled": "true",
      "Execute": "#r \"Microsoft.VisualBasic\"\r\nusing Microsoft.VisualBasic;\r\n\r\n// '2021-10-20 / B.Agullo / \r\n\r\n// Instructions:\r\n// select the measures you want to add to a group (will act as group of headers)\r\n// use the header in a matrix -- makes sense when you have 2 or more groups of columns\r\n// repeat the process for any group \r\n// you can create 3+ layers of groups, duplicate manually the calc group \r\n// you need to update each of the calc items individually if you add a new measure\r\n\r\n//\r\n// ----- do not modify script below this line -----\r\n//\r\n\r\nstring affectedMeasures = \"\"; \r\n\r\nif (Selected.Measures.Count == 0) {\r\n    \r\n    Error(\"No measures selected\"); \r\n    return; \r\n\r\n} else if (Selected.Measures.Count != 0) {\r\n    \r\n    foreach(var m in Selected.Measures) {\r\n        if(affectedMeasures == \"\") {\r\n            affectedMeasures =  \"[\" + m.Name + \"]\";\r\n        } else {\r\n            affectedMeasures = affectedMeasures + \",[\" + m.Name + \"]\" ;\r\n        };\r\n    };  \r\n};\r\n\r\nvar ts = Model.Tables.Where(x => x.GetAnnotation(\"@AgulloBernat\") == \"Measure Group\");\r\n\r\nvar timeIntelCalcGroup = null as CalculationGroupTable; \r\n\r\nif (ts.Count() == 1 ) {\r\n    timeIntelCalcGroup = ts.First() as CalculationGroupTable;\r\n} else if (ts.Count() < 1) {\r\n    \r\n    string calcGroupName = Interaction.InputBox(\"Provide a name for your 'Measure Group' Calculation Group\", \"Calculation Group Name\", \"\", 740, 400);\r\n\r\n    if(calcGroupName == \"\") {\r\n        Error(\"No name provided\");         \r\n        return;\r\n    };\r\n    \r\n    timeIntelCalcGroup = Model.AddCalculationGroup(calcGroupName);\r\n    timeIntelCalcGroup.Description = \"Under this calc group only certain measures will be visible for each calc item, see calculation items for details\";\r\n    timeIntelCalcGroup.SetAnnotation(\"@AgulloBernat\",\"Measure Group\");\r\n\r\n    Model.Tables[calcGroupName].Columns[\"Name\"].Name = calcGroupName; \r\n\r\n} else { \r\n    //this should never happen -- who needs two calc groups for time intelligence? \r\n    timeIntelCalcGroup = SelectTable(ts, label:\"Select your 'Measure Group' Calculation Group\") as CalculationGroupTable;\r\n};\r\n\r\nif (timeIntelCalcGroup == null) { return; } // doesn't work in TE3 as cancel button doesn't return null in TE3\r\n\r\n\r\n\r\n\r\nstring calcItemName = Interaction.InputBox(\"Provide a name for your Measure Group\", \"Measure Group Name\", \"\", 740, 400);\r\n\r\nif(calcItemName == \"\") {\r\n    Error(\"No name provided\");         \r\n    return;\r\n};\r\n\r\nstring calcItemExpression = \"IF( ISSELECTEDMEASURE( \" + affectedMeasures + \"), SELECTEDMEASURE())\";\r\n\r\ntimeIntelCalcGroup.AddCalculationItem(calcItemName,calcItemExpression); \r\ntimeIntelCalcGroup.FormatDax(); \r\n\r\n",
      "Tooltip": "",
      "ValidContexts": "Measure"
    }
  ]
}